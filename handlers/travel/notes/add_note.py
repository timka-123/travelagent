from datetime import datetime
from uuid import uuid4

from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.orm import create_session

from config import config
from database import engine, Travel, TravelNote
from utils import NoteCreateStates


router = Router()


@router.callback_query(F.data.startswith("createnote"))
async def request_note_name(call: CallbackQuery, state: FSMContext):
    travel_id = int(call.data.split("|")[1])
    await state.set_state(NoteCreateStates.ENTER_NAME)
    await state.update_data(travel_id=travel_id)
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"tnotes|{travel_id}")
    )
    await call.message.edit_text(
        text="üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ (–Ω–µ –±–æ–ª—å—à–µ 24 —Å–∏–º–≤–æ–ª–æ–≤)",
        reply_markup=builder.as_markup()
    )


@router.message(NoteCreateStates.ENTER_NAME)
async def request_note_content(message: Message, state: FSMContext):
    data = await state.get_data()
    travel_id = data['travel_id']
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"tnotes|{travel_id}")
    )
    if len(message.text) > 24:
        return await message.answer(
            text="‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 24 —Å–∏–º–≤–æ–ª–æ–≤",
            reply_markup=builder.as_markup()
        )
    await state.set_state(NoteCreateStates.ENTER_CONTENT)
    await state.update_data(name=message.text)
    await message.answer(
        text="üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏. –¢–∞–∫–∂–µ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª—é–±–æ–π —Ñ–∞–π–ª",
        reply_markup=builder.as_markup()
    )


@router.message(NoteCreateStates.ENTER_CONTENT)
async def create_travel(message: Message, state: FSMContext, bot: Bot):
    msg = await message.answer("‚è≥ –°–æ–∑–¥–∞—é –∑–∞–º–µ—Ç–∫—É, –æ–∂–∏–¥–∞–π—Ç–µ. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è")
    data = await state.get_data()
    has_media = False
    note_type = "text"

    if message.video:
        file = await bot.get_file(message.video.file_id)
        text = message.caption
        has_media = True
        note_type = "video"
    elif message.document:
        file = await bot.get_file(message.document.file_id)
        text = message.caption
        has_media = True
        note_type = "document"
    elif message.photo:
        file = await bot.get_file(message.photo[-1].file_id)
        text = message.caption
        has_media = True
        note_type = "photo"
    else:
        text = message.text

    session = create_session(engine)
    if has_media:
        filename = str(uuid4())
        fdata = await bot.download_file(file.file_path)
        config.s3_client.upload_fileobj(fdata, "taprod", filename)
        media_url = config.s3_baseurl + "/" + filename
        travel_note = TravelNote(
            travel_id=data['travel_id'],
            created=datetime.now(),
            content=text,
            note_type=note_type,
            file_url=media_url,
            user_id=message.from_user.id,
            name=data['name']
        )
    else:
        travel_note = TravelNote(
            travel_id=data['travel_id'],
            created=datetime.now(),
            content=text,
            note_type=note_type,
            user_id=message.from_user.id,
            name=data['name']
        )
    session.add(travel_note)
    session.commit()
    session.close()
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üìù –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å", callback_data=f"noteinfo|{travel_note.id}")
    )
    await msg.delete()
    await message.answer(
        text=f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞, –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ",
        reply_markup=builder.as_markup()
    )
