import datetime
import sys

import pytz
from sqlalchemy.orm import create_session
from tzwhere import tzwhere
import traceback
import timezonefinder

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardButton, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder

from database import engine, Location, Travel, User
from utils import TravelCreateStates, OpenStreetMapsClient,string2date

router = Router()


@router.callback_query(F.data == "createtravel")
async def request_travel_name(call: CallbackQuery, state: FSMContext):
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
            callback_data="home"
        )
    )
    await call.message.edit_text(
        text=f"üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –Ω–æ–≤–æ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è (–Ω–µ –±–æ–ª—å—à–µ 25 —Å–∏–º–≤–æ–ª–æ–≤)",
        reply_markup=builder.as_markup()
    )
    await state.set_state(TravelCreateStates.ENTER_NAME)


@router.message(TravelCreateStates.ENTER_NAME)
async def request_locations(message: Message, state: FSMContext):
    name = message.text
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
            callback_data="home"
        )
    )
    if not name or len(name) > 25:
        return await message.answer(
            text="üòû –£–≤—ã, –Ω–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–æ–ª—å—à–µ 25 —Å–∏–º–≤–æ–ª–æ–≤",
            reply_markup=builder.as_markup()
        )
    await state.update_data(name=name)
    await state.set_state(TravelCreateStates.ENTER_DESCRIPTION)
    await message.answer(
        text="üìù –ó–∞–ø–∏—Å–∞–ª, –∞ —Ç–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è. –ï—Å–ª–∏ –≤–≤–æ–¥–∏—Ç—å –Ω–µ—á–µ–≥–æ, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞  /skip",
        reply_markup=builder.as_markup()
    )


@router.message(TravelCreateStates.ENTER_DESCRIPTION)
async def request_location(message: Message, state: FSMContext):
    description = message.text
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
            callback_data="home"
        )
    )
    if not description or len(description) > 1024:
        return await message.answer(
            text="‚òπÔ∏è –°–æ–∂–∞–ª–µ–µ–º, –Ω–æ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ–ª—å—à–µ 1024 —Å–∏–º–≤–æ–ª–æ–≤",
            reply_markup=builder.as_markup()
        )
    if description == "/skip":
        description = "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
    await state.update_data(description=description)
    await state.set_state(TravelCreateStates.ENTER_SECOND_LOCATION)
    await message.answer(
        text=f"üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–æ—á–∫—É –Ω–∞ –∫–∞—Ä—Ç–µ, –≥–¥–µ –í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è. –≠—Ç–æ –Ω—É–∂–Ω–æ, "
             f"—á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å –∏—Ö –≤ –∫–∞—á–µ—Å—Ç–≤–µ –≤—Ç–æ—Ä–æ–π —Ç–æ—á–∫–∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è.",
        reply_markup=builder.as_markup()
    )


@router.message(TravelCreateStates.ENTER_SECOND_LOCATION, F.location)
async def process_sent_venue(message: Message, state: FSMContext):
    lat, lon = message.location.latitude, message.location.longitude
    client = OpenStreetMapsClient()
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
            callback_data="home"
        )
    )
    city = await client.get_location_info(lat, lon)
    if not city:
        return await message.answer(
            text="‚òπÔ∏è –£–≤—ã, –Ω–æ —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥ –∏–ª–∏ –¥–µ—Ä–µ–≤–Ω—é –ø–æ –¥–∞–Ω–Ω–æ–π —Ç–æ—á–∫–µ –ª–æ–∫–∞—Ü–∏–∏",
            reply_markup=builder.as_markup()
        )
    await state.update_data(city=city.city_name)
    await state.update_data(coords={
        "lat": lat,
        "lon": lon
    })
    await message.answer(
        text="""‚åö –ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—ã, –≤ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –ø—Ä–æ–≤–µ–¥–µ—Ç–µ –≤ –≥–æ—Ä–æ–¥–µ. –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ –¥–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏
        
üìÖ <code>–¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥ —á–∞—Å:–º–∏–Ω—É—Ç—ã (–¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞) - –¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥ —á–∞—Å:–º–∏–Ω—É—Ç—ã (–¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è)</code>
        
–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: <code>12.02.2024 12:00 - 14.02.2024 14:00</code>""",
        reply_markup=builder.as_markup()
    )
    await state.set_state(TravelCreateStates.ENTER_TIMES)


@router.message(TravelCreateStates.ENTER_TIMES)
async def process_time(message: Message, state: FSMContext):
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
            callback_data="home"
        )
    )
    # parse argument
    try:
        start_str_date, end_str_date = message.text.split(" - ")
        start_date = string2date(start_str_date)
        end_date = string2date(end_str_date)

        # parse timezone
        data = await state.get_data()
        tf = timezonefinder.TimezoneFinder()
        timezone_str = tf.certain_timezone_at(lat=data['coords']['lat'], lng=data['coords']['lon'])
        timezone = pytz.timezone(timezone_str)
        offset = timezone.utcoffset(start_date).total_seconds()

        # add location
        session = create_session(engine)
        user = session.get(User, message.from_user.id)

        client = OpenStreetMapsClient()
        current_city = await client.get_city(user.city)

        # add travel
        travel = Travel(
            name=data['name'],
            description=data['description'],
            user=message.from_user.id
        )
        session.add(travel)
        session.commit()

        location = Location(
            date_start=start_date,
            date_end=end_date,
            timezone=offset,
            travel=travel.id,
            user=message.from_user.id,
            lat=data['coords']['lat'],
            lon=data['coords']['lon'],
            place=data['city']
        )

        session.add(location)
        session.commit()

        session.close()
    except Exception as e:
        ex_type, ex, tb = sys.exc_info()
        traceback.print_tb(tb)
        print(e)
        return await message.answer(
            text=f"""<b>‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –¥–∞—Ç—ã</b>
        
üìÖ <code>–¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥ —á–∞—Å:–º–∏–Ω—É—Ç—ã (–¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞) - –¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥ —á–∞—Å:–º–∏–Ω—É—Ç—ã (–¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è)</code>
        
–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: <code>12.02.2024 12:00 - 14.02.2024 14:00</code>"""
        )
    await message.answer(
        text="‚úÖ –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ —Å–æ–∑–¥–∞–Ω–æ",
        reply_markup=InlineKeyboardBuilder().row(
            InlineKeyboardButton(text="üí† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ–º", callback_data=f"travel|{travel.id}")
        ).as_markup()
    )
