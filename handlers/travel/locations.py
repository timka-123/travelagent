import sys
import traceback
from logging import error

import pytz
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardButton, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.orm import create_session
from timezonefinder import timezonefinder

from database import engine, Location, Travel, User
from utils import LocationEditStates, string2date, OpenStreetMapsClient, LocationCreateStates

router = Router()


@router.callback_query(F.data.startswith("tlocations"))
async def locations(call: CallbackQuery):
    travel_id = call.data.split("|")[1]
    session = create_session(engine)
    locations = session.query(Location).filter_by(travel=int(travel_id)).order_by(Location.date_start)
    session.close()
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å", callback_data=f"newloc|{travel_id}")
    )
    for location in locations:
        builder.add(
            InlineKeyboardButton(text=f"#{location.id} - {location.place}", callback_data=f"eloc|{location.id}")
        )
    builder.adjust(2)
    builder.row(
        InlineKeyboardButton(text="üè° –û–±—Ä–∞—Ç–Ω–æ", callback_data=f"travel|{travel_id}")
    )
    await call.message.edit_text(
        text="üí† –ù–∏–∂–µ –≤—ã –≤–∏–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ª–æ–∫–∞—Ü–∏–π. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–µ–π",
        reply_markup=builder.as_markup()
    )


@router.callback_query(F.data.startswith("newloc|"))
async def request_location(call: CallbackQuery, state: FSMContext):
    await state.update_data(travel_id=call.data.split("|")[1])
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
            callback_data=f"tlocations|{call.data.split('|')[1]}"
        )
    )
    await state.set_state(LocationCreateStates.ENTER_LOCATIONS)
    await call.message.edit_text(
        text=f"üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–æ—á–∫—É –Ω–∞ –∫–∞—Ä—Ç–µ, –≥–¥–µ –í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è",
        reply_markup=builder.as_markup()
    )


@router.message(LocationCreateStates.ENTER_LOCATIONS, F.location)
async def process_sent_venue(message: Message, state: FSMContext):
    lat, lon = message.location.latitude, message.location.longitude
    client = OpenStreetMapsClient()
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
            callback_data="home"
        )
    )
    city = await client.get_location_info(lat, lon)
    if not city:
        return await message.answer(
            text="‚òπÔ∏è –£–≤—ã, –Ω–æ —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥ –∏–ª–∏ –¥–µ—Ä–µ–≤–Ω—é –ø–æ –¥–∞–Ω–Ω–æ–π —Ç–æ—á–∫–µ –ª–æ–∫–∞—Ü–∏–∏",
            reply_markup=builder.as_markup()
        )
    await state.update_data(city=city.city_name)
    await state.update_data(coords={
        "lat": lat,
        "lon": lon
    })
    await message.answer(
        text="""‚åö –ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—ã, –≤ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –ø—Ä–æ–≤–µ–¥–µ—Ç–µ –≤ –≥–æ—Ä–æ–¥–µ. –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ –¥–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏

üìÖ <code>–¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥ —á–∞—Å:–º–∏–Ω—É—Ç—ã (–¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞) - –¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥ —á–∞—Å:–º–∏–Ω—É—Ç—ã (–¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è)</code>

–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: <code>12.02.2024 12:00 - 14.02.2024 14:00</code>""",
        reply_markup=builder.as_markup()
    )
    await state.set_state(LocationCreateStates.ENTER_TIMES)


@router.message(LocationCreateStates.ENTER_TIMES)
async def process_time(message: Message, state: FSMContext):
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
            callback_data="home"
        )
    )
    # parse argument
    try:
        start_str_date, end_str_date = message.text.split(" - ")
        start_date = string2date(start_str_date)
        end_date = string2date(end_str_date)

        # parse timezone
        data = await state.get_data()
        tf = timezonefinder.TimezoneFinder()
        timezone_str = tf.certain_timezone_at(lat=data['coords']['lat'], lng=data['coords']['lon'])
        timezone = pytz.timezone(timezone_str)
        offset = timezone.utcoffset(start_date).total_seconds()

        # add location
        session = create_session(engine)
        user = session.get(User, message.from_user.id)

        client = OpenStreetMapsClient()
        current_city = await client.get_city(user.city)

        # add travel
        travel = data['travel_id']

        location = Location(
            date_start=start_date,
            date_end=end_date,
            timezone=offset,
            travel=travel,
            user=message.from_user.id,
            lat=data['coords']['lat'],
            lon=data['coords']['lon'],
            place=data['city']
        )

        session.add(location)
        session.commit()

        session.commit()

        session.close()
    except Exception as e:
        ex_type, ex, tb = sys.exc_info()
        traceback.print_tb(tb)
        print(e)
        return await message.answer(
            text=f"""<b>‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –¥–∞—Ç—ã</b>

üìÖ <code>–¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥ —á–∞—Å:–º–∏–Ω—É—Ç—ã (–¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞) - –¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥ —á–∞—Å:–º–∏–Ω—É—Ç—ã (–¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è)</code>

–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: <code>12.02.2024 12:00 - 14.02.2024 14:00</code>"""
        )
    await message.answer(
        text="‚úÖ –¢–æ—á–∫–∞ —Å–æ–∑–¥–∞–Ω–∞",
    )
    location_id = location.id
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üí† –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", callback_data=f"eeloc|place|{location_id}"),
    )
    builder.row(
        InlineKeyboardButton(text="üóìÔ∏è –ù–∞—á–∞–ª–æ", callback_data=f"eeloc|date_start|{location_id}"),
        InlineKeyboardButton(text="üóìÔ∏è –ö–æ–Ω–µ—Ü", callback_data=f"eeloc|date_end|{location_id}"),
    )
    builder.row(
        InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"eeloc|delete|{location.id}"),
    )
    builder.row(
        InlineKeyboardButton(text="üè° –ù–∞–∑–∞–¥", callback_data=f"tlocations|{location.travel}"),
    )
    await message.answer(
        text=f"""<b>üí† –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–∫–∞—Ü–∏–∏</b>

üÜî ID: #{location.id}
üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: <code>{location.lat} {location.lon}</code>
üóìÔ∏è –ù–∞—á–∞–ª–æ: {location.date_start.strftime("%d.%m.%Y")}
üóìÔ∏è –ö–æ–Ω–µ—Ü: {location.date_end.strftime("%d.%m.%Y")}
        """,
        reply_markup=builder.as_markup()
    )


@router.callback_query(F.data.startswith("eloc|"))
async def location_info(call: CallbackQuery, state: FSMContext):
    await state.clear()
    location_id = call.data.split("|")[1]
    session = create_session(engine)
    location = session.get(Location, location_id)
    session.close()
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üí† –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", callback_data=f"eeloc|place|{location_id}"),
    )
    builder.row(
        InlineKeyboardButton(text="üóìÔ∏è –ù–∞—á–∞–ª–æ", callback_data=f"eeloc|date_start|{location_id}"),
        InlineKeyboardButton(text="üóìÔ∏è –ö–æ–Ω–µ—Ü", callback_data=f"eeloc|date_end|{location_id}"),
    )
    builder.row(
        InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"eeloc|delete|{location.id}"),
    )
    builder.row(
        InlineKeyboardButton(text="üè° –ù–∞–∑–∞–¥", callback_data=f"tlocations|{location.travel}"),
    )
    await call.message.edit_text(
        text=f"""<b>üí† –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–∫–∞—Ü–∏–∏</b>

üÜî ID: #{location.id}
üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: <code>{location.lat} {location.lon}</code>
üóìÔ∏è –ù–∞—á–∞–ª–æ: {location.date_start.strftime("%d.%m.%Y")}
üóìÔ∏è –ö–æ–Ω–µ—Ü: {location.date_end.strftime("%d.%m.%Y")}
""",
        reply_markup=builder.as_markup()
    )


@router.callback_query(F.data.startswith("eeloc"))
async def edit_location_info(call: CallbackQuery, state: FSMContext):
    cmd, action, location_id = call.data.split("|")

    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"eloc|{location_id}")
    )
    await state.update_data(
        action=action,
        location_id=location_id
    )
    await state.set_state(LocationEditStates.EDIT_INFO)
    if action == "date_start":
        await call.message.edit_text(
            text="üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>12.02.2024 12:00</code>",
            reply_markup=builder.as_markup()
        )
    elif action == "date_end":
        await call.message.edit_text(
            text="üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∫–æ–Ω—Ü–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>12.02.2024 12:00</code>",
            reply_markup=builder.as_markup()
        )
    elif action == "place":
        await call.message.edit_text(
            text="üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ—á–∫—É –Ω–∞ –∫–∞—Ä—Ç–µ, –≥–¥–µ –±—É–¥–µ—Ç –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ",
            reply_markup=builder.as_markup()
        )
    elif action == "delete":
        await state.clear()
        session = create_session(engine)
        location = session.get(Location, location_id)
        session.delete(location)
        session.commit()
        locations = session.query(Location).filter_by(travel=int(location.travel)).order_by(Location.date_start)
        session.close()
        builder = InlineKeyboardBuilder()
        for location in locations:
            builder.add(
                InlineKeyboardButton(text=f"#{location.id} - {location.place}", callback_data=f"eloc|{location.id}")
            )
        builder.adjust(2)
        builder.row(
            InlineKeyboardButton(text="üè° –û–±—Ä–∞—Ç–Ω–æ", callback_data=f"travel|{location.travel}")
        )
        await call.message.edit_text(
            text="üí† –ù–∏–∂–µ –≤—ã –≤–∏–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ª–æ–∫–∞—Ü–∏–π. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–µ–π",
            reply_markup=builder.as_markup()
        )
        await call.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ")


@router.message(LocationEditStates.EDIT_INFO)
async def apply_new_location_info(message: Message, state: FSMContext):
    data = await state.get_data()
    action = data['action']
    location_id = int(data['location_id'])

    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"eloc|{location_id}")
    )

    session = create_session(engine)
    location = session.get(Location, location_id)

    if action == "date_start":
        try:
            new_date = string2date(message.text)
            location.date_start = new_date
            session.commit()
        except Exception as e:
            error(e)
            return await message.answer(
                text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
                reply_markup=builder.as_markup()
            )
    elif action == "date_end":
        try:
            new_date = string2date(message.text)
            location.date_end = new_date
            session.commit()
        except Exception as e:
            error(e)
            return await message.answer(
                text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
                reply_markup=builder.as_markup()
            )
    elif action == "place":
        if not location:
            return await message.answer(
                text="‚ùå –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ —Ç–æ—á–∫—É –Ω–∞ –∫–∞—Ä—Ç–µ",
                reply_markup=builder.as_markup()
            )
        lat, lon = message.location.latitude, message.location.longitude
        client = OpenStreetMapsClient()
        city = await client.get_location_info(lat, lon)
        if not city:
            return await message.answer(
                text="‚òπÔ∏è –£–≤—ã, –Ω–æ —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥ –∏–ª–∏ –¥–µ—Ä–µ–≤–Ω—é –ø–æ –¥–∞–Ω–Ω–æ–π —Ç–æ—á–∫–µ –ª–æ–∫–∞—Ü–∏–∏",
                reply_markup=builder.as_markup()
            )
        location.lat = lat
        location.lon = lon
        location.place = city.city_name
        session.commit()

    session.close()
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üí† –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", callback_data=f"eeloc|place|{location_id}"),
    )
    builder.row(
        InlineKeyboardButton(text="üóìÔ∏è –ù–∞—á–∞–ª–æ", callback_data=f"eeloc|date_start|{location_id}"),
        InlineKeyboardButton(text="üóìÔ∏è –ö–æ–Ω–µ—Ü", callback_data=f"eeloc|date_end|{location_id}"),
    )
    builder.row(
        InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"eeloc|delete|{location.id}"),
    )
    builder.row(
        InlineKeyboardButton(text="üè° –ù–∞–∑–∞–¥", callback_data=f"tlocations|{location.travel}"),
    )
    await message.answer(
        text=f"""<b>üí† –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–∫–∞—Ü–∏–∏</b>

üÜî ID: #{location.id}
üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: <code>{location.lat} {location.lon}</code>
üóìÔ∏è –ù–∞—á–∞–ª–æ: {location.date_start.strftime("%d.%m.%Y")}
üóìÔ∏è –ö–æ–Ω–µ—Ü: {location.date_end.strftime("%d.%m.%Y")}
    """,
        reply_markup=builder.as_markup()
    )
