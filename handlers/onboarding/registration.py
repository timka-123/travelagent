from aiogram.types import Message, KeyboardButton, InlineKeyboardButton, ReplyKeyboardRemove
from sqlalchemy.orm import create_session
from aiogram.fsm.context import FSMContext
from aiogram import Router, F
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder

from database import engine, User, TravelMember, Travel
from utils import RegisterStates, OpenStreetMapsClient


router = Router()


async def request_name(message: Message, state: FSMContext):
    builder = ReplyKeyboardBuilder()
    builder.add(
        KeyboardButton(text=message.from_user.first_name)
    )
    await message.answer(
        text=f"""<b>üëã –ü—Ä–∏–≤–µ—Ç!</b>
        
ü§ñ –Ø - –±–æ—Ç –¥–ª—è –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π. –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ. –ù–∞—á–Ω–µ–º, –ø–æ–∂–∞–ª—É–π, —Å —Ç–≤–æ–µ–≥–æ –∏–º–µ–Ω–∏!

<b>üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–µ –∏–º—è! –ï—Å–ª–∏ –æ–Ω–æ —Ç–∞–∫–æ–µ –∂–µ, –∫–∞–∫ —É —Ç–µ–±—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ, —Ç–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!</b>""",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )
    await state.set_state(RegisterStates.ENTER_NAME)


@router.message(RegisterStates.ENTER_NAME)
async def request_age(message: Message, state: FSMContext):
    await message.answer(
        text=f"üìù –ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {message.text}! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç <b>—á–∏—Å–ª–æ–º</b>",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.update_data(name=message.text)
    await state.set_state(RegisterStates.ENTER_AGE)


@router.message(RegisterStates.ENTER_AGE)
async def request_location(message: Message, state: FSMContext):
    try:
        age = int(message.text)
    except ValueError:
        return await message.answer(
            text=f"""<b>ü§î –•–º, –∫–∞–∂–µ—Ç—Å—è, —Ç—ã –≤–≤–µ–ª –Ω–µ —á–∏—Å–ª–æ</b>
            
üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä—ã–º –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç—Å—è —Ç–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç"""
        )
    await state.update_data(age=age)
    location_builder = ReplyKeyboardBuilder()
    location_builder.add(
        KeyboardButton(text="üìç –ü—Ä–∏—Å–ª–∞—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)
    )
    await message.answer(
        text="‚úçÔ∏è",
        reply_markup=location_builder.as_markup(resize_keyboard=True)
    )
    await message.answer(
        text=f"""<b>‚úÖ –ó–∞–ø–∏—Å–∞–ª, —Ç–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç: {age}</b>
        
‚ö†Ô∏è –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ —Ç—ã –æ—à–∏–±—Å—è –ø—Ä–∏ –≤–≤–æ–¥–µ –≤–æ–∑—Ä–∞—Å—Ç–∞. 

<b>üìç –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≥–æ—Ä–æ–¥, –≥–¥–µ —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è. –õ–∏–±–æ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ –∫–Ω–æ–ø–∫–µ, –∫–æ—Ç–æ—Ä–∞—è —É —Ç–µ–±—è –æ—Ç–∫—Ä—ã–ª–∞—Å—å –≤–º–µ—Å—Ç–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.</b>""",
    )
    await state.set_state(RegisterStates.ENTER_CITY)


@router.message(RegisterStates.ENTER_CITY, F.location)
async def apply_location(message: Message, state: FSMContext):
    lat, lon = message.location.latitude, message.location.longitude
    client = OpenStreetMapsClient()
    city = await client.get_location_info(lat, lon)
    if not city:
        return await message.answer(
            text="üòî –ù–µ —Å–º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ "
                 "–≥–æ—Ä–æ–¥–∞</b>",
            reply_markup=ReplyKeyboardRemove()
        )
    await state.update_data(
        city=city.city_name,
        country=city.country
    )
    await message.answer(
        text=f"""<b>‚úÖ –ó–∞–ø–∏—Å–∞–ª, —Ç–≤–æ–π –≥–æ—Ä–æ–¥: {city.city_name}, –∞ —Å—Ç—Ä–∞–Ω–∞: {city.country}</b>

‚úçÔ∏è –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ–º–Ω–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ (–¥–æ 70 —Å–∏–º–≤–æ–ª–æ–≤). –ï—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å - –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø–∏—à–∏ /skip""",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(RegisterStates.ENTER_BIO)


@router.message(RegisterStates.ENTER_CITY)
async def request_country(message: Message, state: FSMContext):
    city = message.text
    client = OpenStreetMapsClient()
    city_data = await client.get_city(city)
    if not city_data:
        return await message.answer(
            text="üòî –ù–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –í–∞—à –≥–æ—Ä–æ–¥. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –æ–ø–µ—á–∞—Ç–∞–ª–∏—Å—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ "
                 "–≥–æ—Ä–æ–¥–∞</b>",
            reply_markup=ReplyKeyboardRemove()
        )
    city = await client.get_location_info(lat=city_data.lat, lon=city_data.lon)
    builder = ReplyKeyboardBuilder()
    builder.row(
        KeyboardButton(text=city.country)
    )
    await state.update_data(city=city_data.city_name)
    await message.answer(
        text=f"""<b>üìù –ó–∞–ø–∏—Å–∞–ª —Ç–≤–æ–π –≥–æ—Ä–æ–¥: {city_data.city_name}</b>
        
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ—é —Å—Ç—Ä–∞–Ω—É (–µ—Å–ª–∏ –≤–¥—Ä—É–≥ —Ç—ã —Å—á–∏—Ç–∞–µ—à—å, —á—Ç–æ –º—ã –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –µ—ë –Ω–µ–≤–µ—Ä–Ω–æ)""",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )
    await state.set_state(RegisterStates.ENTER_COUNTRY)


@router.message(RegisterStates.ENTER_COUNTRY)
async def request_bio(message: Message, state: FSMContext):
    country = message.text
    client = OpenStreetMapsClient()
    is_valid = await client.check_if_country_exists(country)
    if not is_valid:
        return await message.answer(
            text="üòî –ù–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –í–∞—à—É —Å—Ç—Ä–∞–Ω—É. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –æ–ø–µ—á–∞—Ç–∞–ª–∏—Å—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã, "
                 "–≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–∞—à –≥–æ—Ä–æ–¥</b>",
            reply_markup=ReplyKeyboardRemove()
        )
    await state.update_data(country=country)
    await message.answer(
        text=f"""<b>üëç –ó–∞–ø–∏—Å–∞–ª —Å—Ç—Ä–∞–Ω—É: {country}</b>
        
–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–µ–º–Ω–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ (–¥–æ 70 —Å–∏–º–≤–æ–ª–æ–≤). –ï—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å - –Ω–∞–∂–º–∏ –Ω–∞ /skip""",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(RegisterStates.ENTER_BIO)


@router.message(RegisterStates.ENTER_BIO)
async def create_user(message: Message, state: FSMContext, bot):
    bio = message.text
    if len(bio) > 70:
        return await message.answer(
            text="‚òπÔ∏è –î–ª–∏–Ω–∞ –±–∏–æ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 70 —Å–∏–º–≤–æ–ª–æ–≤",
            reply_markup=ReplyKeyboardRemove()
        )
    if bio == "/skip":
        bio = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∏—á–µ–≥–æ –æ —Å–µ–±–µ –Ω–µ —Ä–∞—Å—Å–∫–∞–∑–∞–ª"
    await state.update_data(bio=bio)
    data = await state.get_data()

    session = create_session(engine)
    user = User(
        id=message.from_user.id,
        age=data['age'],
        city=data['city'],
        country=data['country'],
        bio=data['bio'],
        name=data['name']
    )
    session.add(user)
    session.commit()

    if data.get("travel_id"):
        travel_id = data.get("travel_id")
        travel = session.get(Travel, travel_id)
        travel_member = session.query(TravelMember).filter_by(user_id=message.from_user.id).filter_by(travel_id=travel_id).first()
        if travel_member:
            return await message.answer(
                text="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...",
            )

        travel_member = TravelMember(
            user_id=message.from_user.id,
            travel_id=travel_id
        )
        session.add(travel_member)
        session.commit()

        await message.answer(
            text="‚úÖ –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ!",
        )

        # notify all members
        members = session.query(TravelMember).filter_by(travel_id=travel_id).all()
        for member in members:
            try:
                await bot.send_message(
                    chat_id=member.user_id,
                    text=f"""<b>üîî –í –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω —É—á–∞—Å—Ç–Ω–∏–∫</b>
                    
üÜî –ï–≥–æ ID: <code>{travel_member.user_id}</code>

‚ö†Ô∏è –í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –ø–æ—Å–∫–æ–ª—å–∫—É –í—ã —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º <b>{travel.name}</b>"""
                )
            except:
                ...

    session.close()
    await message.answer(
        text="‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ü—Ä–æ–ø–∏—à–∏—Ç–µ /start –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é"
    )
