from aiogram import F, Router, Bot
from aiogram.types import CallbackQuery, InlineKeyboardButton, Message, switch_inline_query_chosen_chat
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.orm import create_session

from utils import AddFriendsStates
from database import engine, TravelMember, User, Travel

router = Router()


@router.callback_query(F.data.startswith("taf"))
async def request_contact(call: CallbackQuery, state: FSMContext):
    travel_id = int(call.data.split("|")[1])
    await state.set_state(AddFriendsStates.ENTER_CONTACT)
    builder = InlineKeyboardBuilder()
    query = f"jointravel-{travel_id}"
    builder.add(
        InlineKeyboardButton(text="üí† –û—Ç–ø—Ä–∞–≤–∏—Ç—å", switch_inline_query_chosen_chat=switch_inline_query_chosen_chat.SwitchInlineQueryChosenChat(
            query=f"https://t.me/T_TravelAgentBot?start={query} <- –ü–µ—Ä–µ–π–¥–∏ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –º–æ–µ–º—É –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—é!",
            allow_user_chats=True,
            allow_group_chats=True,
            allow_channel_chats=False,
            allow_bot_chats=False
        ))
    )
    await state.update_data(travel_id=travel_id)
    await call.message.answer(
        text="üìá –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω–≤–∞–π—Ç –¥—Ä—É–≥—É!",
        reply_markup=builder.as_markup()
    )


@router.message(AddFriendsStates.ENTER_CONTACT)
async def add_friend(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    travel_id = data['travel_id']
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"tinvite|{travel_id}")
    )
    if not message.contact:
        return await message.answer(
            text="‚ùå –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ –∫–æ–Ω—Ç–∞–∫—Ç, –∞ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ. –í–∞–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ "
                 "—Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å (—Å–∫—Ä–µ–ø–∫–∞ - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç)",
            reply_markup=builder.as_markup()
        )

    session = create_session(engine)
    user = session.get(User, message.contact.user_id)
    if not user:
        return await message.answer(
            text="‚ùå –ù–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ó–∞–ø—É—Å—Ç–∏–ª –ª–∏ –æ–Ω –±–æ—Ç–∞?",
            reply_markup=builder.as_markup()
        )

    travel_member = session.query(TravelMember).filter_by(user_id=message.contact.user_id).filter_by(travel_id=travel_id).first()
    if travel_member:
        return await message.answer(
            text="‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ",
            reply_markup=builder.as_markup()
        )

    travel_member = TravelMember(
        user_id=message.contact.user_id,
        travel_id=travel_id
    )
    travel = session.get(Travel, travel_id)
    session.add(travel_member)
    session.commit()
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(text="ü§ñ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º", callback_data=f"tfm|{travel_member.id}")
    )
    await message.answer(
        text="‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω!",
        reply_markup=builder.as_markup()
    )

    # notify all members
    members = session.query(TravelMember).filter_by(travel_id=travel_id).all()
    for member in members:
        try:
            await bot.send_message(
                chat_id=member.user_id,
                text=f"""<b>üîî –í –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω —É—á–∞—Å—Ç–Ω–∏–∫</b>
                
üÜî –ï–≥–æ ID: <code>{travel_member.user_id}</code>

‚ö†Ô∏è –í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –ø–æ—Å–∫–æ–ª—å–∫—É –í—ã —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º <b>{travel.name}</b>"""
            )
        except:
            ...
